// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ErrorResponseError.
const (
	ErrorResponseErrorInternalServerError ErrorResponseError = "InternalServerError"
	ErrorResponseErrorInvalidBody         ErrorResponseError = "InvalidBody"
	ErrorResponseErrorInvalidCredentials  ErrorResponseError = "InvalidCredentials"
	ErrorResponseErrorMethodNotAllowed    ErrorResponseError = "MethodNotAllowed"
	ErrorResponseErrorNotFound            ErrorResponseError = "NotFound"
	ErrorResponseErrorReportInvalid       ErrorResponseError = "ReportInvalid"
)

// ErrorResponse A generic error response
type ErrorResponse struct {
	// Description Human-readable description of the error
	Description *string `json:"description,omitempty"`

	// Error Error code, only somewhat human-readable
	Error ErrorResponseError `json:"error"`
}

// ErrorResponseError Error code, only somewhat human-readable
type ErrorResponseError string

// ParseReportTextBody defines parameters for ParseReport.
type ParseReportTextBody = string

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	// Password The password of the account.
	Password string `json:"password"`

	// Username The username of the account.
	Username string `json:"username"`
}

// LogoutParams defines parameters for Logout.
type LogoutParams struct {
	// Session The session token to invalidate.
	Session string `form:"session" json:"session"`
}

// ParseReportTextRequestBody defines body for ParseReport for text/plain ContentType.
type ParseReportTextRequestBody = ParseReportTextBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OpenAPI specification (JSON)
	// (GET /api/openapi.json)
	OpenapiJson(c *gin.Context)
	// OpenAPI specification (YAML)
	// (GET /api/openapi.yaml)
	OpenapiYaml(c *gin.Context)
	// Redoc documentation
	// (GET /api/redoc)
	Redoc(c *gin.Context)
	// Scalar documentation
	// (GET /api/scalar)
	Scalar(c *gin.Context)
	// Parse a code coverage report
	// (POST /api/v0/parse-report)
	ParseReport(c *gin.Context)
	// Login to an account
	// (POST /api/v1/login)
	Login(c *gin.Context)
	// Log out of an account
	// (GET /api/v1/logout)
	Logout(c *gin.Context, params LogoutParams)
	// Ping the server
	// (GET /api/v1/ping)
	Ping(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// OpenapiJson operation middleware
func (siw *ServerInterfaceWrapper) OpenapiJson(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OpenapiJson(c)
}

// OpenapiYaml operation middleware
func (siw *ServerInterfaceWrapper) OpenapiYaml(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OpenapiYaml(c)
}

// Redoc operation middleware
func (siw *ServerInterfaceWrapper) Redoc(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Redoc(c)
}

// Scalar operation middleware
func (siw *ServerInterfaceWrapper) Scalar(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Scalar(c)
}

// ParseReport operation middleware
func (siw *ServerInterfaceWrapper) ParseReport(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ParseReport(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LogoutParams

	{
		var cookie string

		if cookie, err = c.Cookie("session"); err == nil {
			var value string
			err = runtime.BindStyledParameterWithOptions("simple", "session", cookie, &value, runtime.BindStyledParameterOptions{Explode: true, Required: true})
			if err != nil {
				siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter session: %w", err), http.StatusBadRequest)
				return
			}
			params.Session = value

		} else {
			siw.ErrorHandler(c, fmt.Errorf("Query argument session is required, but not found"), http.StatusBadRequest)
			return
		}
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Logout(c, params)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Ping(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/openapi.json", wrapper.OpenapiJson)
	router.GET(options.BaseURL+"/api/openapi.yaml", wrapper.OpenapiYaml)
	router.GET(options.BaseURL+"/api/redoc", wrapper.Redoc)
	router.GET(options.BaseURL+"/api/scalar", wrapper.Scalar)
	router.POST(options.BaseURL+"/api/v0/parse-report", wrapper.ParseReport)
	router.POST(options.BaseURL+"/api/v1/login", wrapper.Login)
	router.GET(options.BaseURL+"/api/v1/logout", wrapper.Logout)
	router.GET(options.BaseURL+"/api/v1/ping", wrapper.Ping)
}
