// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"github.com/jackc/pgx/v5/pgtype"
)

type Organisation struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Service   string             `db:"service" json:"service"`
	Name      string             `db:"name" json:"name"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type Report struct {
	ID           pgtype.UUID        `db:"id" json:"id"`
	RepositoryID pgtype.UUID        `db:"repository_id" json:"repository_id"`
	Commit       string             `db:"commit" json:"commit"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type ReportFile struct {
	ID           pgtype.UUID        `db:"id" json:"id"`
	RepositoryID pgtype.UUID        `db:"repository_id" json:"repository_id"`
	ReportID     pgtype.UUID        `db:"report_id" json:"report_id"`
	FilePath     string             `db:"file_path" json:"file_path"`
	Coverage     pgtype.Numeric     `db:"coverage" json:"coverage"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type ReportFileLineRegion struct {
	ID           pgtype.UUID        `db:"id" json:"id"`
	RepositoryID pgtype.UUID        `db:"repository_id" json:"repository_id"`
	ReportFileID pgtype.UUID        `db:"report_file_id" json:"report_file_id"`
	StartLine    int32              `db:"start_line" json:"start_line"`
	EndLine      int32              `db:"end_line" json:"end_line"`
	StartColumn  int32              `db:"start_column" json:"start_column"`
	EndColumn    int32              `db:"end_column" json:"end_column"`
	Statements   int32              `db:"statements" json:"statements"`
	Executed     int32              `db:"executed" json:"executed"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type ReportFlag struct {
	ReportID  pgtype.UUID        `db:"report_id" json:"report_id"`
	Name      string             `db:"name" json:"name"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type Repository struct {
	ID             pgtype.UUID        `db:"id" json:"id"`
	OrganisationID pgtype.UUID        `db:"organisation_id" json:"organisation_id"`
	Name           string             `db:"name" json:"name"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type User struct {
	ID          pgtype.UUID        `db:"id" json:"id"`
	Email       string             `db:"email" json:"email"`
	Username    string             `db:"username" json:"username"`
	DisplayName string             `db:"display_name" json:"display_name"`
	Password    string             `db:"password" json:"password"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type UserOauth2 struct {
	UserID            pgtype.UUID        `db:"user_id" json:"user_id"`
	Service           string             `db:"service" json:"service"`
	ServiceID         string             `db:"service_id" json:"service_id"`
	AccessToken       string             `db:"access_token" json:"access_token"`
	AccessTokenNonce  string             `db:"access_token_nonce" json:"access_token_nonce"`
	RefreshToken      string             `db:"refresh_token" json:"refresh_token"`
	RefreshTokenNonce string             `db:"refresh_token_nonce" json:"refresh_token_nonce"`
	Expiry            pgtype.Timestamptz `db:"expiry" json:"expiry"`
	CreatedAt         pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type UserToken struct {
	ID          pgtype.UUID        `db:"id" json:"id"`
	UserID      pgtype.UUID        `db:"user_id" json:"user_id"`
	AccessToken string             `db:"access_token" json:"access_token"`
	Expiry      pgtype.Timestamptz `db:"expiry" json:"expiry"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
}
