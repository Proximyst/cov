// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"github.com/jackc/pgx/v5/pgtype"
)

type AuditLogEvent struct {
	ID        int64              `db:"id" json:"id"`
	EventType string             `db:"event_type" json:"event_type"`
	EventData AuditLogEventData  `db:"event_data" json:"event_data"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type Organisation struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Service   string             `db:"service" json:"service"`
	Name      string             `db:"name" json:"name"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type Report struct {
	ID           pgtype.UUID        `db:"id" json:"id"`
	RepositoryID pgtype.UUID        `db:"repository_id" json:"repository_id"`
	Commit       string             `db:"commit" json:"commit"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type ReportFile struct {
	ID           pgtype.UUID        `db:"id" json:"id"`
	RepositoryID pgtype.UUID        `db:"repository_id" json:"repository_id"`
	ReportID     pgtype.UUID        `db:"report_id" json:"report_id"`
	FilePath     string             `db:"file_path" json:"file_path"`
	Coverage     pgtype.Numeric     `db:"coverage" json:"coverage"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type ReportFileLineRegion struct {
	ID           pgtype.UUID        `db:"id" json:"id"`
	RepositoryID pgtype.UUID        `db:"repository_id" json:"repository_id"`
	ReportFileID pgtype.UUID        `db:"report_file_id" json:"report_file_id"`
	StartLine    int32              `db:"start_line" json:"start_line"`
	EndLine      int32              `db:"end_line" json:"end_line"`
	StartColumn  int32              `db:"start_column" json:"start_column"`
	EndColumn    int32              `db:"end_column" json:"end_column"`
	Statements   int32              `db:"statements" json:"statements"`
	Executed     int32              `db:"executed" json:"executed"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type ReportFlag struct {
	ReportID  pgtype.UUID        `db:"report_id" json:"report_id"`
	Name      string             `db:"name" json:"name"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type Repository struct {
	ID             pgtype.UUID        `db:"id" json:"id"`
	OrganisationID pgtype.UUID        `db:"organisation_id" json:"organisation_id"`
	Name           string             `db:"name" json:"name"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type User struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Username  string             `db:"username" json:"username"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type UserEmail struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Email     string             `db:"email" json:"email"`
	Verified  bool               `db:"verified" json:"verified"`
	IsPrimary bool               `db:"is_primary" json:"is_primary"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type UserPassword struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Password  string             `db:"password" json:"password"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type UserRole struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Role      string             `db:"role" json:"role"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}
